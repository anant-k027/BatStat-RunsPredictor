# -*- coding: utf-8 -*-
"""RunsPredictorr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gj53g6_BQ1cJi0TQ7aifQRGuFSCnRPVt
"""

#------ installing necessary packages
!pip install xgboost scikit-learn pandas matplotlib seaborn

#------ loading and preparing data
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from xgboost import XGBRegressor

deliveries = pd.read_csv('/content/deliveries.csv')
matches = pd.read_csv('/content/matches.csv')
batting_stats = pd.read_csv('/content/most_runs_average_strikerate.csv')
teams = pd.read_csv('/content/teams.csv')
home_away = pd.read_csv('/content/teamwise_home_and_away.csv')

# Merge match-level info into delivery data
deliveries = deliveries.merge(
    matches[['id', 'Season', 'venue', 'date', 'team1', 'team2']],
    how='left',
    left_on='match_id',
    right_on='id'
)

#------ total runs per match / batsman
batsman_runs = deliveries.groupby(['match_id', 'batsman']).agg({
    'batsman_runs': 'sum',
    'venue': 'first',
    'Season': 'first',
    'batting_team': 'first',
    'bowling_team': 'first'
}).reset_index()

batsman_runs.rename(columns={'batsman_runs': 'total_runs'}, inplace=True)

#------ batting position
# First ball faced = batting position
deliveries['ball_num'] = deliveries.groupby(['match_id', 'batsman']).cumcount() + 1
batting_position = deliveries.groupby(['match_id', 'batsman'])['ball_num'].min().reset_index()
batting_position.rename(columns={'ball_num': 'batting_position'}, inplace=True)

batsman_runs = batsman_runs.merge(batting_position, on=['match_id', 'batsman'], how='left')

#------- adding player career stats
batting_stats.rename(columns={
    'Player': 'batsman',
    'Avg': 'average',
    'SR': 'strikerate'
}, inplace=True)

# Merge based on batsman name
batsman_runs = batsman_runs.merge(batting_stats[['batsman', 'average', 'strikerate']], how='left', on='batsman')

#------ home and away features
# Drop rows with missing target or features
batsman_runs.dropna(subset=['total_runs', 'batting_position', 'average', 'strikerate'], inplace=True)

#---------- MODELLING
features = ['average', 'strikerate', 'batting_position' , 'Season']
X = batsman_runs[features]
y = batsman_runs['total_runs']

#----
# Use one-hot encoding
X = pd.get_dummies(X, columns=['Season'])


#------- TRAIN (80%) and TEST (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = XGBRegressor(n_estimators=300, learning_rate=0.1, max_depth=6, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"MAE: {mae:.2f}")

#------- plot
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.5, color='green')
plt.plot([0,100], [0,100], 'r--')
plt.xlabel("Actual Runs")
plt.ylabel("Predicted Runs")
plt.title("Actual vs Predicted Runs (XGBoost)")
plt.show()